import java.util.Stack;
import java.lang.Exception;

public class Solution {

    //创建数据栈
    public Stack<Integer> stackOfData = new Stack<Integer>();
    //创建辅助栈
    public Stack<Integer> stackOfHelper = new Stack<Integer>();
    
    public void push(int node) {
        //先将新的数据压入数据栈中
        stackOfData.push(node);
        //如果辅助栈为空，或者这个数小于最小值，就直接压入辅助栈
        //否则就将辅助栈顶元素也就是最小元素压入辅助栈
        if (stackOfHelper.isEmpty()|| node < stackOfHelper.peek()) {
            stackOfHelper.push(node);
        } else {
            stackOfHelper.push(stackOfHelper.peek());
        }
    }
    
    public void pop() {
        //如果两个栈为空，就直接返回
        if (stackOfData.size() > 0 && stackOfHelper.size() > 0) {
            stackOfData.pop();
            stackOfHelper.pop();
        }
    }
    
    public int top() {
        if (stackOfData.size() > 0) {
            return stackOfData.peek();
        }
        return -1;
    }
    
    public int min() {
        if (stackOfHelper.isEmpty()) {
            return -1;
        }
        return stackOfHelper.peek();
    }
}
