public class Solution {
    public int MoreThanHalfNum_Solution(int [] array) {
        //如果数组为空，或长度为0，就抛出异常
        if (array == null || array.length == 0) {
            throw new RuntimeException("array is empty!!!");
        }
        //创建临时变量，保存数组的中间位置，以便找到排序后的中间元素
        int mid = array.length / 2;
        //创建左指针右指针临时变量
        int left = 0, right = array.length - 1;
        //再进行快排分隔，保存分隔后的基准值的元素位置
        int index = partition(array, left, right);
        
        while (index != mid) {
            //如果中间值小于中位数，就递归处理右边区间，在右边找
            if (index < mid) {
                left = index + 1;
                index = partition(array, left, right);
            } else if (index > mid) {
                //反之就在左边区间中找中位数
                right = index - 1;
                index = partition(array, left, right);
            }
        }
        //如果找到了基准值元素和中位数位置一样，说明找到了该数字
        int res = array[mid];
        //判断是否出现频率最高的数字超过数组长度的一半
        if (isHasMoreHalfTimes(array, res)) {
            return res;
        } else {
            return 0;
        }
    }
    
    private static boolean isHasMoreHalfTimes(int[] array, int res) {
        int times = 0;
        for (int num : array) {
            if (res == num) times++;
        }
        if (times <= array.length / 2) {
            return false;
        }
        return true;
    }
    
    private static int partition(int[] array, int left, int right) {
        //假设基准值为最右边的元素
        int standardIndex = right;
        int standardValue = array[standardIndex];
        while (left < right) {
            while (left < right && array[left] <= standardValue) {
                left++;
            }
            //此时left指向左边第一个大于基准值的元素
            while (left < right && array[right] >= standardValue) {
                right--;
            }
            //此时right指向右边第一个小于基准值的元素
            //交换两个元素的位置
            swap(array, left, right);
        }
        //循环结束，left和right相遇
        //交换基准值位置的元素和相遇元素位置
        swap(array, left, standardIndex);
        return left;
    }
    
    private static void swap(int[] array, int x, int y) {
        int temp = array[x];
        array[x] = array[y];
        array[y] = temp;
    }
}
