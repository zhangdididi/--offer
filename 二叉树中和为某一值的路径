/*
输入一颗二叉树的根节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。
路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。
(注意: 在返回值的list中，数组长度大的数组靠前)
*/


import java.util.ArrayList;
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/

public class Solution {
    //创建元素为数组列表的数组列表作为返回值
    private ArrayList<ArrayList<Integer>> res = new ArrayList<>();
    //创建数组列表，保存每次的路径
    private ArrayList<Integer> list = new ArrayList<>();
    public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) {
        //根结点为空，直接返回空的数组列表
        if (root == null) return res;
        //先加入根结点的值
        list.add(root.val);
        //让目标值减去根结点的值，再继续往下遍历
        target -= root.val;
        if (target == 0 && root.left == null && root.right == null) {
            //如果走到这一步刚好目标值减到0，也就是经过的所有结点值相加为目标值，就把该路径加入到返回值中
            res.add(new ArrayList<Integer>(list));
        }
        //递归遍历右子树和左子树
        FindPath(root.left, target);
        FindPath(root.right, target);
        //返回到上一层，需要把当前一层的结点值删除掉
        list.remove(list.size() - 1);
        return res;
    }
}
