import java.util.Stack;

public class Solution {
    public boolean IsPopOrder(int [] pushA,int [] popA) {
        //如果序列不满足要求，就返回false
        if (pushA == null || popA == null || pushA.length <= 0) {
            return false;
        }
        //新建辅助栈队列
        Stack<Integer> stack = new Stack<>();
        for (int i = 0, j = 0; i < pushA.length; ) {
            //从压入栈序列中将元素放入辅助栈，如果栈顶元素和弹出序列不一致，就将压入序列的元素压入栈中
            stack.push(pushA[i++]);
            //如果弹出栈序列的当前元素和栈顶元素相同，则说明栈的弹出序列与栈顶元素符合
            //就将栈顶元素弹出，并且向后遍历弹出序列
            while (popA.length > j && stack.peek() == popA[j]) {
                stack.pop();
                j++;
            }
        }
        //栈为空说明弹出序列可以是压入序列对应的弹出序列，符合栈规则
        return stack.isEmpty();
    }
}



import java.util.Stack;

public class Solution {
    public boolean IsPopOrder(int [] pushA,int [] popA) {
        if (pushA == null || popA == null || pushA.length != popA.length) {
            return false;
        }
        int i = 0, j = 0;
        Stack<Integer>  st = new Stack<>();
        for (; i < pushA.length; i++) {
            st.push(pushA[i]);
            while (!st.empty() && popA[j] == st.peek()) {
                st.pop();
                j++;
            }
        }
        return st.empty();
    }
}
