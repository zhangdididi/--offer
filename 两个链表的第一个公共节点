/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/
public class Solution {
    public ListNode FindFirstCommonNode(ListNode head1, ListNode head2) {
        //如果有一个为空，就返回null
        if (head1 == null || head2 == null) return null;
        //首先求得两个链表的长度
        int size1 = size(head1), size2 = size(head2);
        ListNode curr1 = head1;
        ListNode curr2 = head2;
        //让长的链表指针先走他们长度的差值步
        if (size1 > size2) {
            for (int i = 0; i < size1 - size2; i++) {
                curr1 = curr1.next;
            }
        } else {
            for (int i = 0; i < size2 - size1; i++) {
                curr2 = curr2.next;
            }
        }
        //然后两个链表一起开始向后遍历，如果相同就返回该节点
        while (curr1 != null && curr2 != null) {
            if (curr1 == curr2) {
                return curr1;
            }
            curr1 = curr1.next;
            curr2 = curr2.next;
        }
        return null;
    }
    
    //求链表长度的方法
    private static int size(ListNode head) {
        int length = 0;
        for (ListNode curr = head; curr != null; curr = curr.next) {
            length++;
        }
        return length;
    }
}
