//冒泡排序思路
import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
        ArrayList<Integer> list = new ArrayList<>();
        int length = input.length;
        if (k == 0 || k > length) {
            return list;
        }
        for (int i = 0; i < k; i++) {
            for (int j = i; j < length - 1; j++) {
                if (input[j] < input[j + 1]) {
                    int temp = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = temp;
                }
            }
            list.add(input[length - 1 - i]);
        }
        return list;
    }
}


//快排
import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
        ArrayList<Integer> list = new ArrayList<>();
        //如果参数数组未空，或长度为0，抛出异常
        if (input == null || input.length == 0) {
            return list;
        }
        //如果k为0，或k大于数组长度，返回空的数组列表
        if (k <= 0 || k > input.length) {
            return list;
        }
        int left = 0, right = input.length - 1;
        int index = partition(input, left, right);
        while (index != k - 1) {
            if (index < k - 1) {
                left = index + 1;
                index = partition(input, left, right);
            } else {
                right = index - 1;
                index = partition(input, left, right);
            }
        }
        //循环结束之后，index左侧的元素都小于index右侧的元素
        //将他们放到返回的数组列表中
        for (int i = 0; i < k; i++) {
            list.add(input[i]);
        }
        return list;
    }
    
    private static int partition(int[] input, int left, int right) {
        //如果元素left大于等于right，说明该区间只有一个元素，无需排序
        if (left >= right) return right;
        //创建临时变量分别保存基准值的下标以及基准值
        int standardIndex = right;
        int standardValue = input[standardIndex];
        //进入while循环，条件为left<right，将左边大于基准值的元素和右边小于基准值的元素互换
        while (left < right) {
            while (left < right && input[left] <= standardValue) {
                left++;
            }
            //上面循环结束，left指向左侧第一个大于基准值的元素
            while (left < right && input[right] >= standardValue) {
                right--;
            }
            //right指向右侧第一个小于基准值的元素
            //交换两个元素位置
            swap(input, left, right);
        }
        //直到两个指针相遇，就交换基准值元素位置和相交位置的元素
        swap(input, left, standardIndex);
        //最后返回排序过后基准值的下标
        return left;
    }
    
    private static void swap (int[] array, int x, int y) {
        int temp = array[x];
        array[x] = array[y];
        array[y] = temp;
    }
}


//基于优先级队列实现大根堆
import java.util.*;
public class Solution {
    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
        ArrayList<Integer> list = new ArrayList<>();
        //如果参数数组未空，或长度为0，抛出异常
        if (input == null || input.length == 0) {
            return list;
        }
        //如果k为0，或k大于数组长度，返回空的数组列表
        if (k <= 0 || k > input.length) {
            return list;
        }
        //创建优先级队列，利用堆结构的特性，保存较小的k个值
        PriorityQueue<Integer> heap = new PriorityQueue<>(k, new Comparator<Integer>() {
            public int compare(Integer o1, Integer o2) {
                return o2.compareTo(o1);
            }
        });
        //遍历数组，如果当前堆中元素小于k个，就加入堆中
        //满了之后，如果当前队首元素，也就是最大的元素，大于当前数组元素的话，就出队列，将遍历的数组元素入队列
        for (int i = 0; i < input.length; i++) {
            if (heap.size() < k) {
                heap.offer(input[i]);
            } else if (heap.peek() > input[i]) {
                heap.poll();
                heap.offer(input[i]);
            }
        }
        //将堆中元素都放入返回数组中
        for (Integer num : heap) {
            list.add(num);
        }
        return list;
    }
}
