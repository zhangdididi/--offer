/*
统计一个数字在排序数组中出现的次数
*/

//遍历一次
public class Solution {
    public int GetNumberOfK(int [] array , int k) {
        int count = 0;
        for (int i = 0; i < array.length; i++) {
            if (array[i] == k) {
                count++;
            } else if (array[i] > k) {
                break;
            }
        }
        return count;
    }
}

//二分查找
public class Solution {
    public int GetNumberOfK(int [] array , int k) {
        //如果数组为空或者长度为0，返回0
        if (array == null || array.length == 0) {
            return 0;
        }
        //创建左右指针分别指向数组最左边和最右边
        int left = 0, right = array.length - 1;
        int mid = 0;
        int count = 0;
        //采用二分查找，mid小于k，就继续找(mid, right]
        while (left <= right) {
            mid = (right + left) / 2;
            if (array[mid] < k) {
                left = mid + 1;
            } else if (array[mid] > k) {
                right = mid - 1;
            } else {
                int index = mid - 1;
                while (index >= 0 && array[index] == k) {
                    count++;
                    index--;
                }
                while (mid < array.length && array[mid] == k) {
                    count++;
                    mid++;
                }
                break;
            }
        }
        return count;
    }
}


//哈希表
import java.util.HashMap;
public class Solution {
    public int GetNumberOfK(int [] array , int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int num : array) {
            int count = map.getOrDefault(num, 0);
            map.put(num, count + 1);
        }
        return map.containsKey(k) ? map.get(k) : 0;
    }
}
