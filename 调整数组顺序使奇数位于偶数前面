/*
题目描述：
输入一个整数数组，实现一个函数来调整该数组中数字的顺序，
使得所有的奇数位于数组的前半部分，
所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。
*/

//两个数组数组列表保存奇数和偶数
import java.util.List;
import java.util.ArrayList;
public class Solution {
    public void reOrderArray(int [] array) {
        List<Integer> list1 = new ArrayList<>();        
        List<Integer> list2 = new ArrayList<>();
        for (int num : array) {
            if (num % 2 == 0) {
                list2.add(num);
            } else {
                list1.add(num);
            }
        }
        for (int i = 0; i < array.length; i++) {
            if (i < list1.size()) {
                array[i] = list1.get(i);
            } else {
                array[i] = list2.get(i - list1.size());
            }
        }
    }
}

//临时数组
public void reOrderArray(int [] array) {
    int[] arr = new int[array.length];
    int index = 0;
    for (int i = 0; i < array.length; i++) {
        if (array[i] % 2 != 0) {
            arr[index++] = array[i];
        }
    }
    for (int i = 0; i < array.length; i++) {
        if (array[i] % 2 == 0) {
            arr[index++] = array[i];
        }
    }
    for (int i = 0; i < array.length; i++) {
        array[i] = arr[i];
    }
}


//向前移动奇数
public void reOrderArray(int [] array) {
    for (int i = 1; i < array.length; i++) {
        if (array[i] % 2 != 0) {
            //如果是奇数，就向前移动
            int index = i;
            while (index > 0) {
                //大于0时，前一个数如果是偶数就交换
                if (array[index - 1] % 2 == 0) {
                    int temp = array[index - 1];
                    array[index - 1] = array[index];
                    array[index] = temp;
                } else {
                    break;
                }
                index--;
            }
        }
    }
}

//双指针，交换前后奇数偶数
public int[] exchange(int[] nums) {
    if (nums.length == 0) {
        return nums;
    }
    int left = 0, right = nums.length - 1;
    while (left < right) {
        while (left < right && nums[left] % 2 != 0) {
            left++;
        }
        while (left < right && nums[right] % 2 == 0) {
            right--;
        }
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }
    return nums;
}
