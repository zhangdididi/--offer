public class Solution {
    public int FindGreatestSumOfSubArray(int[] array) {
        //如果数组为空或者数组长度为0
        if (array == null || array.length == 0) {
            return 0;
        }
        //创建返回值，用来保存最大和
        int maxSum = Integer.MIN_VALUE;
        //创建临时变量保存部分元素的和
        int sum = 0;
        //循环遍历数组，对遍历到的元素加和，如果前面数组的和小于0，就抛弃前面的区间
        //继续遍历，遇到负数就保存前面的最大和
        for (int i = 0; i < array.length; i++) {
            if (sum <= 0) {
                sum = array[i];
            } else {
                sum += array[i];
            }
            if (sum > maxSum) {
                maxSum = sum;
            }
            
        }
        return maxSum;
    }
}


//动态规划
public class Solution {
    public int FindGreatestSumOfSubArray(int[] array) {
         if (array == null || array.length == 0) {
             return 0;
         }
        int[] dp = new int[array.length];
        dp[0] = array[0];
        int max = dp[0];
        for (int i = 1; i < array.length; i++) {
            dp[i] = Math.max(dp[i - 1] + array[i], array[i]);
            if (max < dp[i]) {
                max = dp[i];
            }
        }
        return max;
    }
}



public class Solution {
    public int FindGreatestSumOfSubArray(int[] array) {
         if (array == null || array.length == 0) {
             return 0;
         }
        int sum = array[0];
        int max = array[0];
        for (int i = 1; i < array.length; i++) {
            if (sum >= 0) {
                sum += array[i];
            } else {
                sum = array[i];
            }
            if (max < sum) {
                max = sum;
            }
        }
        return max;
    }
}
