/*
输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。
如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。
*/


import java.util.Arrays;
public class Solution {
    public boolean VerifySquenceOfBST(int [] sequence) {
        //如果数组为空，直接返回false
        if (sequence == null || sequence.length == 0) {
            return false;
        }
        //不为空，则根据或许遍历特点找到数组最后一个元素为根结点
        //同时左子树的元素在右子树元素的左边
        int root = sequence[sequence.length - 1];
        //根据二叉搜索树的特性知道，根结点的左子树元素都小于根结点
        //右子树元素都大于根结点
        //所以循环遍历数组，找到第一个比根结点大的数字，左边为左子树元素，右边为右子树元素
        int indexOfLeft = 0;
        for (; indexOfLeft < sequence.length - 1; indexOfLeft++) {
            if (sequence[indexOfLeft] > root) {
                break;
            }
        }
        //跳出循环后，下标index左侧的元素都小于根结点，符合二叉搜索树特性
        //再遍历该元素的右侧元素，如果存在小于根结点的元素，就不符合二叉搜索树的特性。返回false
        int indexOfRight = indexOfLeft;
        for (; indexOfRight < sequence.length - 1; indexOfRight++) {
            if (sequence[indexOfRight] < root) {
                return false;
            }
        }
        //然后再分别递归判断左子树序列和右子树序列
        boolean left = true;
        if (indexOfLeft > 0) {
            left = VerifySquenceOfBST(Arrays.copyOfRange(sequence, 0, indexOfLeft));
        }
        boolean right = true;
        if (indexOfRight > indexOfLeft) {
            right = VerifySquenceOfBST(Arrays.copyOfRange(sequence, indexOfLeft, sequence.length - 1));
        }
        return (left && right);
    }
}


public class Solution {
    public boolean VerifySquenceOfBST(int [] sequence) {
        if (sequence == null || sequence.length == 0) return false;
        return VerifySquenceOfBSTHelper(sequence, 0, sequence.length - 1);
    }
    
   public boolean VerifySquenceOfBSTHelper(int[] sequence, int start, int  end) {
       if (start >= end) return true;
       int root = sequence[end];//拿到根结点
       int i = start;
       //划分过程
       while (i < end && sequence[i] < root) {
           i++;
       }
       //i位置往后到end都是大于等于root的
       //不符合就不是二叉搜索树
       //检测过程
       for (int j = i; j < end; j++) {
           if (sequence[j] < root) {
               return false;
           }
       }
       
       return VerifySquenceOfBSTHelper(sequence, start, i - 1) 
           && VerifySquenceOfBSTHelper(sequence, i, end - 1);
   }
}
