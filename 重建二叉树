/*
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。
假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
*/

public class Solution {
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        TreeNode root = reConstructHelper(pre, 0, pre.length - 1, in, 0, in.length - 1);
        return root;
    }
    
    private TreeNode reConstructHelper(int[] pre, int preLeft, int preRight, int[] in, int inLeft, int inRight) {
        if (preLeft > preRight || inLeft > inRight) {
            return null;
        }
        //首先在先序遍历中找到根节点
        TreeNode root = new TreeNode(pre[preLeft]);
        //再循环找中序遍历中的跟结点
        for (int i = 0; i < in.length; i++) {
            if (in[i] == pre[preLeft]) {
                root.left = reConstructHelper(pre, preLeft + 1, preLeft + i - inLeft, in, inLeft, i - 1);
                root.right = reConstructHelper(pre, preLeft + i + 1 - inLeft, preRight, in, i + 1, inRight);
                break;
            }
        }
        return root;
    }
}
