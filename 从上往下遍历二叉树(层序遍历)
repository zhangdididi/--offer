import java.util.ArrayList;
import java.util.LinkedList;

/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) {
        //先创建一个数组列表来作为返回值
        ArrayList<Integer> list = new ArrayList<>();
        //判断根结点是否为空，如果为空就返回空的数组队列
        if (root == null) return list;
        //如果根结点不为空，就创建一个队列，将根结点放到队列中
        LinkedList<TreeNode> queueOfTreeNode = new LinkedList<>();
        queueOfTreeNode.offer(root);
        //队列不为空，就按顺序取出每一个队首元素并将队首元素的左子节点和右子节点都插入到队列尾
        while (!queueOfTreeNode.isEmpty()) {
            //先取出队首元素的值放入到打印的列表里
            TreeNode temp = queueOfTreeNode.poll();
            list.add(temp.val);
            //分别判断队首元素的左子节点和右子节点是否为空，不为空就插入到队列尾部
            if (temp.left != null) {
                queueOfTreeNode.offer(temp.left);
            }
            if (temp.right != null) {
                queueOfTreeNode.offer(temp.right);
            }
        }
        return list;
    }
}



import java.util.ArrayList;
import java.util.Queue;
import java.util.PriorityQueue;
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) {
        ArrayList<Integer> res = new ArrayList<>();
        if (root == null) return res;
        Queue<TreeNode> queue = new PriorityQueue<>();
        queue.offer(root);
        while (queue.isEmpty()) {
            TreeNode node = queue.peek();
            queue.poll();
            res.add(node.val);
            if (node.left != null) {
                queue.offer(node.left);
            }
            if (node.right != null) {
                queue.offer(node.right);
            }
        }
        return res;
    }
}
